@inject UserManager<ApplicationUser> UserManager
@{
    var user = await UserManager.GetUserAsync(User);
    var isEstagiario = user != null && await UserManager.IsInRoleAsync(user, "Estagiario");
}
<ul class="nav nav-pills flex-column">
    <li class="nav-item">
        <a class="nav-link @ManageNavPages.IndexNavClass(ViewContext)" id="profile" asp-page="./Index">
            <i class="fas fa-user-circle fa-fw me-2"></i>Perfil
        </a>
    </li>

    @* SÓ MOSTRA ESTE LINK SE O USUÁRIO FOR UM ESTAGIÁRIO *@
    @if (isEstagiario)
    {
        <li class="nav-item">
            <a class="nav-link @ManageNavPages.EstagiarioProfileNavClass(ViewContext)" id="estagiario-profile" asp-page="./EstagiarioProfile">
                <i class="fas fa-user-graduate fa-fw me-2"></i>Meus Dados de Estágio
            </a>
        </li>
    }

    <li class="nav-item">
        <a class="nav-link @ManageNavPages.ChangePasswordNavClass(ViewContext)" id="change-password" asp-page="./ChangePassword">
            <i class="fas fa-key fa-fw me-2"></i>Senha
        </a>
    </li>

    @* Os links abaixo são para funcionalidades que não estamos usando no momento, então foram removidos para limpar a interface.
    @if ((await SignInManager.GetExternalAuthenticationSchemesAsync()).Any())
    {
    <li id="external-logins" class="nav-item"><a id="external-login" class="nav-link @ManageNavPages.ExternalLoginsNavClass(ViewContext)" asp-page="./ExternalLogins">External logins</a></li>
    }
    <li class="nav-item"><a class="nav-link @ManageNavPages.TwoFactorAuthenticationNavClass(ViewContext)" id="two-factor" asp-page="./TwoFactorAuthentication">Two-factor authentication</a></li>
    *@

    <li class="nav-item">
        <a class="nav-link @ManageNavPages.PersonalDataNavClass(ViewContext)" id="personal-data" asp-page="./PersonalData">
            <i class="fas fa-database fa-fw me-2"></i>Dados Pessoais
        </a>
    </li>
</ul>