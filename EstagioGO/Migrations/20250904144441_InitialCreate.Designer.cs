// <auto-generated />
using System;
using EstagioGO.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EstagioGO.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250904144441_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("PrimeiroAcessoConcluido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EstagioGO.Data.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Acesso total ao sistema",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "2",
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Gestão completa dos estagiários",
                            Name = "Coordenador",
                            NormalizedName = "COORDENADOR"
                        },
                        new
                        {
                            Id = "3",
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Avaliação e acompanhamento dos estagiários",
                            Name = "Supervisor",
                            NormalizedName = "SUPERVISOR"
                        },
                        new
                        {
                            Id = "4",
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Visualização do próprio perfil e registros",
                            Name = "Estagiario",
                            NormalizedName = "ESTAGIARIO"
                        });
                });

            modelBuilder.Entity("EstagioGO.Models.Analise.Avaliacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvaliadorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComentariosGerais")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("DataAvaliacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstagiarioId")
                        .HasColumnType("int");

                    b.Property<decimal>("MediaNotas")
                        .HasColumnType("decimal(3,2)");

                    b.HasKey("Id");

                    b.HasIndex("AvaliadorId");

                    b.HasIndex("EstagiarioId");

                    b.ToTable("Avaliacoes");
                });

            modelBuilder.Entity("EstagioGO.Models.Analise.AvaliacaoCompetencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvaliacaoId")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CompetenciaId")
                        .HasColumnType("int");

                    b.Property<int>("Nota")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("AvaliacaoId", "CompetenciaId")
                        .IsUnique();

                    b.ToTable("AvaliacaoCompetencias");
                });

            modelBuilder.Entity("EstagioGO.Models.Analise.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrdemExibicao")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrdemExibicao");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Descricao = "Avaliação dos conhecimentos técnicos específicos",
                            Nome = "Conhecimento Técnico",
                            OrdemExibicao = 1
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            Descricao = "Habilidades de comunicação e expressão",
                            Nome = "Comunicação",
                            OrdemExibicao = 2
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            Descricao = "Capacidade de colaboração e trabalho em grupo",
                            Nome = "Trabalho em Equipe",
                            OrdemExibicao = 3
                        },
                        new
                        {
                            Id = 4,
                            Ativo = true,
                            Descricao = "Iniciativa e capacidade de antecipação",
                            Nome = "Proatividade",
                            OrdemExibicao = 4
                        },
                        new
                        {
                            Id = 5,
                            Ativo = true,
                            Descricao = "Qualidade e precisão nas entregas",
                            Nome = "Qualidade do Trabalho",
                            OrdemExibicao = 5
                        });
                });

            modelBuilder.Entity("EstagioGO.Models.Analise.Competencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OrdemExibicao")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("OrdemExibicao");

                    b.ToTable("Competencias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            CategoriaId = 1,
                            Descricao = "Domínio das ferramentas e tecnologias",
                            OrdemExibicao = 1
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            CategoriaId = 1,
                            Descricao = "Capacidade de resolver problemas técnicos",
                            OrdemExibicao = 2
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            CategoriaId = 1,
                            Descricao = "Qualidade do código/documentação",
                            OrdemExibicao = 3
                        },
                        new
                        {
                            Id = 4,
                            Ativo = true,
                            CategoriaId = 1,
                            Descricao = "Capacidade de aprendizado de novas tecnologias",
                            OrdemExibicao = 4
                        },
                        new
                        {
                            Id = 5,
                            Ativo = true,
                            CategoriaId = 2,
                            Descricao = "Clareza na expressão oral",
                            OrdemExibicao = 1
                        },
                        new
                        {
                            Id = 6,
                            Ativo = true,
                            CategoriaId = 2,
                            Descricao = "Clareza na expressão escrita",
                            OrdemExibicao = 2
                        },
                        new
                        {
                            Id = 7,
                            Ativo = true,
                            CategoriaId = 2,
                            Descricao = "Capacidade de apresentação",
                            OrdemExibicao = 3
                        },
                        new
                        {
                            Id = 8,
                            Ativo = true,
                            CategoriaId = 2,
                            Descricao = "Escuta ativa e compreensão",
                            OrdemExibicao = 4
                        },
                        new
                        {
                            Id = 9,
                            Ativo = true,
                            CategoriaId = 3,
                            Descricao = "Colaboração e apoio aos colegas",
                            OrdemExibicao = 1
                        },
                        new
                        {
                            Id = 10,
                            Ativo = true,
                            CategoriaId = 3,
                            Descricao = "Respeito às opiniões divergentes",
                            OrdemExibicao = 2
                        },
                        new
                        {
                            Id = 11,
                            Ativo = true,
                            CategoriaId = 3,
                            Descricao = "Contribuição para decisões coletivas",
                            OrdemExibicao = 3
                        },
                        new
                        {
                            Id = 12,
                            Ativo = true,
                            CategoriaId = 3,
                            Descricao = "Flexibilidade e adaptabilidade",
                            OrdemExibicao = 4
                        },
                        new
                        {
                            Id = 13,
                            Ativo = true,
                            CategoriaId = 4,
                            Descricao = "Iniciativa para assumir responsabilidades",
                            OrdemExibicao = 1
                        },
                        new
                        {
                            Id = 14,
                            Ativo = true,
                            CategoriaId = 4,
                            Descricao = "Antecipação de problemas e soluções",
                            OrdemExibicao = 2
                        },
                        new
                        {
                            Id = 15,
                            Ativo = true,
                            CategoriaId = 4,
                            Descricao = "Busca por melhorias contínuas",
                            OrdemExibicao = 3
                        },
                        new
                        {
                            Id = 16,
                            Ativo = true,
                            CategoriaId = 4,
                            Descricao = "Autonomia na execução de tarefas",
                            OrdemExibicao = 4
                        },
                        new
                        {
                            Id = 17,
                            Ativo = true,
                            CategoriaId = 5,
                            Descricao = "Precisão e atenção aos detalhes",
                            OrdemExibicao = 1
                        },
                        new
                        {
                            Id = 18,
                            Ativo = true,
                            CategoriaId = 5,
                            Descricao = "Cumprimento de prazos",
                            OrdemExibicao = 2
                        },
                        new
                        {
                            Id = 19,
                            Ativo = true,
                            CategoriaId = 5,
                            Descricao = "Organização e documentação",
                            OrdemExibicao = 3
                        },
                        new
                        {
                            Id = 20,
                            Ativo = true,
                            CategoriaId = 5,
                            Descricao = "Consistência nas entregas",
                            OrdemExibicao = 4
                        });
                });

            modelBuilder.Entity("EstagioGO.Models.Domain.Estagiario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Curso")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataTermino")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstituicaoEnsino")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SupervisorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Estagiarios");
                });

            modelBuilder.Entity("EstagioGO.Models.Domain.Frequencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detalhamento")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EstagiarioId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("HoraEntrada")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HoraSaida")
                        .HasColumnType("time");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacao")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Presente")
                        .HasColumnType("bit");

                    b.Property<string>("RegistradoPorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EstagiarioId");

                    b.HasIndex("RegistradoPorId");

                    b.ToTable("Frequencias");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EstagioGO.Models.Analise.Avaliacao", b =>
                {
                    b.HasOne("ApplicationUser", "Avaliador")
                        .WithMany("AvaliacoesRealizadas")
                        .HasForeignKey("AvaliadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EstagioGO.Models.Domain.Estagiario", "Estagiario")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("EstagiarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avaliador");

                    b.Navigation("Estagiario");
                });

            modelBuilder.Entity("EstagioGO.Models.Analise.AvaliacaoCompetencia", b =>
                {
                    b.HasOne("EstagioGO.Models.Analise.Avaliacao", "Avaliacao")
                        .WithMany("CompetenciasAvaliadas")
                        .HasForeignKey("AvaliacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EstagioGO.Models.Analise.Competencia", "Competencia")
                        .WithMany("AvaliacoesCompetencia")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Avaliacao");

                    b.Navigation("Competencia");
                });

            modelBuilder.Entity("EstagioGO.Models.Analise.Competencia", b =>
                {
                    b.HasOne("EstagioGO.Models.Analise.Categoria", "Categoria")
                        .WithMany("Competencias")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("EstagioGO.Models.Domain.Estagiario", b =>
                {
                    b.HasOne("ApplicationUser", "Supervisor")
                        .WithMany("EstagiariosSupervisionados")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "User")
                        .WithMany("EstagiariosComoUsuario")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supervisor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EstagioGO.Models.Domain.Frequencia", b =>
                {
                    b.HasOne("EstagioGO.Models.Domain.Estagiario", "Estagiario")
                        .WithMany("Frequencias")
                        .HasForeignKey("EstagiarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "RegistradoPor")
                        .WithMany("FrequenciasRegistradas")
                        .HasForeignKey("RegistradoPorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estagiario");

                    b.Navigation("RegistradoPor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EstagioGO.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EstagioGO.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Navigation("AvaliacoesRealizadas");

                    b.Navigation("EstagiariosComoUsuario");

                    b.Navigation("EstagiariosSupervisionados");

                    b.Navigation("FrequenciasRegistradas");
                });

            modelBuilder.Entity("EstagioGO.Models.Analise.Avaliacao", b =>
                {
                    b.Navigation("CompetenciasAvaliadas");
                });

            modelBuilder.Entity("EstagioGO.Models.Analise.Categoria", b =>
                {
                    b.Navigation("Competencias");
                });

            modelBuilder.Entity("EstagioGO.Models.Analise.Competencia", b =>
                {
                    b.Navigation("AvaliacoesCompetencia");
                });

            modelBuilder.Entity("EstagioGO.Models.Domain.Estagiario", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Frequencias");
                });
#pragma warning restore 612, 618
        }
    }
}
